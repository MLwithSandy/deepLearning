{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression with a Neural Network mindset\n",
    "\n",
    "Welcome to your first (required) programming assignment! You will build a logistic regression classifier to recognize  cats. This assignment will step you through how to do this with a Neural Network mindset, and so will also hone your intuitions about deep learning.\n",
    "\n",
    "**Instructions:**\n",
    "- Do not use loops (for/while) in your code, unless the instructions explicitly ask you to do so.\n",
    "\n",
    "**You will learn to:**\n",
    "- Build the general architecture of a learning algorithm, including:\n",
    "    - Initializing parameters\n",
    "    - Calculating the cost function and its gradient\n",
    "    - Using an optimization algorithm (gradient descent) \n",
    "- Gather all three functions above into a main model function, in the right order."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1 - Packages ##\n",
    "\n",
    "First, let's run the cell below to import all the packages that you will need during this assignment. \n",
    "- [numpy](www.numpy.org) is the fundamental package for scientific computing with Python.\n",
    "- [h5py](http://www.h5py.org) is a common package to interact with a dataset that is stored on an H5 file.\n",
    "- [matplotlib](http://matplotlib.org) is a famous library to plot graphs in Python.\n",
    "- [PIL](http://www.pythonware.com/products/pil/) and [scipy](https://www.scipy.org/) are used here to test your model with your own picture at the end."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.5/site-packages/matplotlib/font_manager.py:273: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.\n",
      "  warnings.warn('Matplotlib is building the font cache using fc-list. This may take a moment.')\n",
      "/opt/conda/lib/python3.5/site-packages/matplotlib/font_manager.py:273: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.\n",
      "  warnings.warn('Matplotlib is building the font cache using fc-list. This may take a moment.')\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import h5py\n",
    "import scipy\n",
    "from PIL import Image\n",
    "from scipy import ndimage\n",
    "from lr_utils import load_dataset\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 2 - Overview of the Problem set ##\n",
    "\n",
    "**Problem Statement**: You are given a dataset (\"data.h5\") containing:\n",
    "    - a training set of m_train images labeled as cat (y=1) or non-cat (y=0)\n",
    "    - a test set of m_test images labeled as cat or non-cat\n",
    "    - each image is of shape (num_px, num_px, 3) where 3 is for the 3 channels (RGB). Thus, each image is square (height = num_px) and (width = num_px).\n",
    "\n",
    "You will build a simple image-recognition algorithm that can correctly classify pictures as cat or non-cat.\n",
    "\n",
    "Let's get more familiar with the dataset. Load the data by running the following code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Loading the data (cat/non-cat)\n",
    "train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We added \"_orig\" at the end of image datasets (train and test) because we are going to preprocess them. After preprocessing, we will end up with train_set_x and test_set_x (the labels train_set_y and test_set_y don't need any preprocessing).\n",
    "\n",
    "Each line of your train_set_x_orig and test_set_x_orig is an array representing an image. You can visualize an example by running the following code. Feel free also to change the `index` value and re-run to see other images. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = [0], it's a 'non-cat' picture.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb02a4bdf60>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example of a picture\n",
    "index = 22\n",
    "plt.imshow(train_set_x_orig[index])\n",
    "print (\"y = \" + str(train_set_y[:, index]) + \", it's a '\" + classes[np.squeeze(train_set_y[:, index])].decode(\"utf-8\") +  \"' picture.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Many software bugs in deep learning come from having matrix/vector dimensions that don't fit. If you can keep your matrix/vector dimensions straight you will go a long way toward eliminating many bugs. \n",
    "\n",
    "**Exercise:** Find the values for:\n",
    "    - m_train (number of training examples)\n",
    "    - m_test (number of test examples)\n",
    "    - num_px (= height = width of a training image)\n",
    "Remember that `train_set_x_orig` is a numpy-array of shape (m_train, num_px, num_px, 3). For instance, you can access `m_train` by writing `train_set_x_orig.shape[0]`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of training examples: m_train = 209\n",
      "Number of testing examples: m_test = 50\n",
      "Height/Width of each image: num_px = 64\n",
      "Each image is of size: (64, 64, 3)\n",
      "train_set_x shape: (209, 64, 64, 3)\n",
      "train_set_y shape: (1, 209)\n",
      "test_set_x shape: (50, 64, 64, 3)\n",
      "test_set_y shape: (1, 50)\n"
     ]
    }
   ],
   "source": [
    "### START CODE HERE ### (≈ 3 lines of code)\n",
    "m_train = train_set_x_orig.shape[0]\n",
    "m_test = test_set_x_orig.shape[0]\n",
    "num_px = train_set_x_orig.shape[1]\n",
    "### END CODE HERE ###\n",
    "\n",
    "print (\"Number of training examples: m_train = \" + str(m_train))\n",
    "print (\"Number of testing examples: m_test = \" + str(m_test))\n",
    "print (\"Height/Width of each image: num_px = \" + str(num_px))\n",
    "print (\"Each image is of size: (\" + str(num_px) + \", \" + str(num_px) + \", 3)\")\n",
    "print (\"train_set_x shape: \" + str(train_set_x_orig.shape))\n",
    "print (\"train_set_y shape: \" + str(train_set_y.shape))\n",
    "print (\"test_set_x shape: \" + str(test_set_x_orig.shape))\n",
    "print (\"test_set_y shape: \" + str(test_set_y.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output for m_train, m_test and num_px**: \n",
    "<table style=\"width:15%\">\n",
    "  <tr>\n",
    "    <td>**m_train**</td>\n",
    "    <td> 209 </td> \n",
    "  </tr>\n",
    "  \n",
    "  <tr>\n",
    "    <td>**m_test**</td>\n",
    "    <td> 50 </td> \n",
    "  </tr>\n",
    "  \n",
    "  <tr>\n",
    "    <td>**num_px**</td>\n",
    "    <td> 64 </td> \n",
    "  </tr>\n",
    "  \n",
    "</table>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For convenience, you should now reshape images of shape (num_px, num_px, 3) in a numpy-array of shape (num_px $*$ num_px $*$ 3, 1). After this, our training (and test) dataset is a numpy-array where each column represents a flattened image. There should be m_train (respectively m_test) columns.\n",
    "\n",
    "**Exercise:** Reshape the training and test data sets so that images of size (num_px, num_px, 3) are flattened into single vectors of shape (num\\_px $*$ num\\_px $*$ 3, 1).\n",
    "\n",
    "A trick when you want to flatten a matrix X of shape (a,b,c,d) to a matrix X_flatten of shape (b$*$c$*$d, a) is to use: \n",
    "```python\n",
    "X_flatten = X.reshape(X.shape[0], -1).T      # X.T is the transpose of X\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_set_x_flatten shape: (12288, 209)\n",
      "train_set_y shape: (1, 209)\n",
      "test_set_x_flatten shape: (12288, 50)\n",
      "test_set_y shape: (1, 50)\n",
      "sanity check after reshaping: [17 31 56 22 33]\n"
     ]
    }
   ],
   "source": [
    "# Reshape the training and test examples\n",
    "\n",
    "### START CODE HERE ### (≈ 2 lines of code)\n",
    "train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T \n",
    "test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T \n",
    "### END CODE HERE ###\n",
    "\n",
    "print (\"train_set_x_flatten shape: \" + str(train_set_x_flatten.shape))\n",
    "print (\"train_set_y shape: \" + str(train_set_y.shape))\n",
    "print (\"test_set_x_flatten shape: \" + str(test_set_x_flatten.shape))\n",
    "print (\"test_set_y shape: \" + str(test_set_y.shape))\n",
    "print (\"sanity check after reshaping: \" + str(train_set_x_flatten[0:5,0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**: \n",
    "\n",
    "<table style=\"width:35%\">\n",
    "  <tr>\n",
    "    <td>**train_set_x_flatten shape**</td>\n",
    "    <td> (12288, 209)</td> \n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td>**train_set_y shape**</td>\n",
    "    <td>(1, 209)</td> \n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td>**test_set_x_flatten shape**</td>\n",
    "    <td>(12288, 50)</td> \n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td>**test_set_y shape**</td>\n",
    "    <td>(1, 50)</td> \n",
    "  </tr>\n",
    "  <tr>\n",
    "  <td>**sanity check after reshaping**</td>\n",
    "  <td>[17 31 56 22 33]</td> \n",
    "  </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To represent color images, the red, green and blue channels (RGB) must be specified for each pixel, and so the pixel value is actually a vector of three numbers ranging from 0 to 255.\n",
    "\n",
    "One common preprocessing step in machine learning is to center and standardize your dataset, meaning that you substract the mean of the whole numpy array from each example, and then divide each example by the standard deviation of the whole numpy array. But for picture datasets, it is simpler and more convenient and works almost as well to just divide every row of the dataset by 255 (the maximum value of a pixel channel).\n",
    "\n",
    "<!-- During the training of your model, you're going to multiply weights and add biases to some initial inputs in order to observe neuron activations. Then you backpropogate with the gradients to train the model. But, it is extremely important for each feature to have a similar range such that our gradients don't explode. You will see that more in detail later in the lectures. !--> \n",
    "\n",
    "Let's standardize our dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "train_set_x = train_set_x_flatten/255.\n",
    "test_set_x = test_set_x_flatten/255."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='blue'>\n",
    "**What you need to remember:**\n",
    "\n",
    "Common steps for pre-processing a new dataset are:\n",
    "- Figure out the dimensions and shapes of the problem (m_train, m_test, num_px, ...)\n",
    "- Reshape the datasets such that each example is now a vector of size (num_px \\* num_px \\* 3, 1)\n",
    "- \"Standardize\" the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3 - General Architecture of the learning algorithm ##\n",
    "\n",
    "It's time to design a simple algorithm to distinguish cat images from non-cat images.\n",
    "\n",
    "You will build a Logistic Regression, using a Neural Network mindset. The following Figure explains why **Logistic Regression is actually a very simple Neural Network!**\n",
    "\n",
    "<img src=\"images/LogReg_kiank.png\" style=\"width:650px;height:400px;\">\n",
    "\n",
    "**Mathematical expression of the algorithm**:\n",
    "\n",
    "For one example $x^{(i)}$:\n",
    "$$z^{(i)} = w^T x^{(i)} + b \\tag{1}$$\n",
    "$$\\hat{y}^{(i)} = a^{(i)} = sigmoid(z^{(i)})\\tag{2}$$ \n",
    "$$ \\mathcal{L}(a^{(i)}, y^{(i)}) =  - y^{(i)}  \\log(a^{(i)}) - (1-y^{(i)} )  \\log(1-a^{(i)})\\tag{3}$$\n",
    "\n",
    "The cost is then computed by summing over all training examples:\n",
    "$$ J = \\frac{1}{m} \\sum_{i=1}^m \\mathcal{L}(a^{(i)}, y^{(i)})\\tag{6}$$\n",
    "\n",
    "**Key steps**:\n",
    "In this exercise, you will carry out the following steps: \n",
    "    - Initialize the parameters of the model\n",
    "    - Learn the parameters for the model by minimizing the cost  \n",
    "    - Use the learned parameters to make predictions (on the test set)\n",
    "    - Analyse the results and conclude"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4 - Building the parts of our algorithm ## \n",
    "\n",
    "The main steps for building a Neural Network are:\n",
    "1. Define the model structure (such as number of input features) \n",
    "2. Initialize the model's parameters\n",
    "3. Loop:\n",
    "    - Calculate current loss (forward propagation)\n",
    "    - Calculate current gradient (backward propagation)\n",
    "    - Update parameters (gradient descent)\n",
    "\n",
    "You often build 1-3 separately and integrate them into one function we call `model()`.\n",
    "\n",
    "### 4.1 - Helper functions\n",
    "\n",
    "**Exercise**: Using your code from \"Python Basics\", implement `sigmoid()`. As you've seen in the figure above, you need to compute $sigmoid( w^T x + b) = \\frac{1}{1 + e^{-(w^T x + b)}}$ to make predictions. Use np.exp()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: sigmoid\n",
    "\n",
    "def sigmoid(z):\n",
    "    \"\"\"\n",
    "    Compute the sigmoid of z\n",
    "\n",
    "    Arguments:\n",
    "    z -- A scalar or numpy array of any size.\n",
    "\n",
    "    Return:\n",
    "    s -- sigmoid(z)\n",
    "    \"\"\"\n",
    "\n",
    "    ### START CODE HERE ### (≈ 1 line of code)\n",
    "    s = 1/(1+np.exp(-z))\n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sigmoid([0, 2]) = [ 0.5         0.88079708]\n"
     ]
    }
   ],
   "source": [
    "print (\"sigmoid([0, 2]) = \" + str(sigmoid(np.array([0,2]))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**: \n",
    "\n",
    "<table>\n",
    "  <tr>\n",
    "    <td>**sigmoid([0, 2])**</td>\n",
    "    <td> [ 0.5         0.88079708]</td> \n",
    "  </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.2 - Initializing parameters\n",
    "\n",
    "**Exercise:** Implement parameter initialization in the cell below. You have to initialize w as a vector of zeros. If you don't know what numpy function to use, look up np.zeros() in the Numpy library's documentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: initialize_with_zeros\n",
    "\n",
    "def initialize_with_zeros(dim):\n",
    "    \"\"\"\n",
    "    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n",
    "    \n",
    "    Argument:\n",
    "    dim -- size of the w vector we want (or number of parameters in this case)\n",
    "    \n",
    "    Returns:\n",
    "    w -- initialized vector of shape (dim, 1)\n",
    "    b -- initialized scalar (corresponds to the bias)\n",
    "    \"\"\"\n",
    "    \n",
    "    ### START CODE HERE ### (≈ 1 line of code)\n",
    "    w = np.zeros((dim,1))\n",
    "    b = 0\n",
    "    ### END CODE HERE ###\n",
    "\n",
    "    assert(w.shape == (dim, 1))\n",
    "    assert(isinstance(b, float) or isinstance(b, int))\n",
    "    \n",
    "    return w, b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "w = [[ 0.]\n",
      " [ 0.]]\n",
      "b = 0\n"
     ]
    }
   ],
   "source": [
    "dim = 2\n",
    "w, b = initialize_with_zeros(dim)\n",
    "print (\"w = \" + str(w))\n",
    "print (\"b = \" + str(b))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**: \n",
    "\n",
    "\n",
    "<table style=\"width:15%\">\n",
    "    <tr>\n",
    "        <td>  ** w **  </td>\n",
    "        <td> [[ 0.]\n",
    " [ 0.]] </td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td>  ** b **  </td>\n",
    "        <td> 0 </td>\n",
    "    </tr>\n",
    "</table>\n",
    "\n",
    "For image inputs, w will be of shape (num_px $\\times$ num_px $\\times$ 3, 1)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.3 - Forward and Backward propagation\n",
    "\n",
    "Now that your parameters are initialized, you can do the \"forward\" and \"backward\" propagation steps for learning the parameters.\n",
    "\n",
    "**Exercise:** Implement a function `propagate()` that computes the cost function and its gradient.\n",
    "\n",
    "**Hints**:\n",
    "\n",
    "Forward Propagation:\n",
    "- You get X\n",
    "- You compute $A = \\sigma(w^T X + b) = (a^{(1)}, a^{(2)}, ..., a^{(m-1)}, a^{(m)})$\n",
    "- You calculate the cost function: $J = -\\frac{1}{m}\\sum_{i=1}^{m}y^{(i)}\\log(a^{(i)})+(1-y^{(i)})\\log(1-a^{(i)})$\n",
    "\n",
    "Here are the two formulas you will be using: \n",
    "\n",
    "$$ \\frac{\\partial J}{\\partial w} = \\frac{1}{m}X(A-Y)^T\\tag{7}$$\n",
    "$$ \\frac{\\partial J}{\\partial b} = \\frac{1}{m} \\sum_{i=1}^m (a^{(i)}-y^{(i)})\\tag{8}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: propagate\n",
    "\n",
    "def propagate(w, b, X, Y):\n",
    "    \"\"\"\n",
    "    Implement the cost function and its gradient for the propagation explained above\n",
    "\n",
    "    Arguments:\n",
    "    w -- weights, a numpy array of size (num_px * num_px * 3, 1)\n",
    "    b -- bias, a scalar\n",
    "    X -- data of size (num_px * num_px * 3, number of examples)\n",
    "    Y -- true \"label\" vector (containing 0 if non-cat, 1 if cat) of size (1, number of examples)\n",
    "\n",
    "    Return:\n",
    "    cost -- negative log-likelihood cost for logistic regression\n",
    "    dw -- gradient of the loss with respect to w, thus same shape as w\n",
    "    db -- gradient of the loss with respect to b, thus same shape as b\n",
    "    \n",
    "    Tips:\n",
    "    - Write your code step by step for the propagation. np.log(), np.dot()\n",
    "    \"\"\"\n",
    "    \n",
    "    m = X.shape[1]\n",
    "    \n",
    "    # FORWARD PROPAGATION (FROM X TO COST)\n",
    "    ### START CODE HERE ### (≈ 2 lines of code)\n",
    "    A = sigmoid(np.dot(w.T,X)+b)                                    # compute activation\n",
    "    #print(A.shape)\n",
    "    #print(Y.shape)\n",
    "    cost = (-1/m)* (np.dot(Y,np.log(A).T)+np.dot((1-Y),np.log((1-A).T)))              # compute cost\n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    # BACKWARD PROPAGATION (TO FIND GRAD)\n",
    "    ### START CODE HERE ### (≈ 2 lines of code)\n",
    "    dw = (1/m)*np.dot(X,(A-Y).T)\n",
    "    db = (1/m)*np.sum(A-Y,1)\n",
    "    ### END CODE HERE ###\n",
    "\n",
    "    assert(dw.shape == w.shape)\n",
    "    assert(db.dtype == float)\n",
    "    cost = np.squeeze(cost)\n",
    "    assert(cost.shape == ())\n",
    "    \n",
    "    grads = {\"dw\": dw,\n",
    "             \"db\": db}\n",
    "    \n",
    "    return grads, cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dw = [[ 0.99845601]\n",
      " [ 2.39507239]]\n",
      "db = [ 0.00145558]\n",
      "cost = 5.801545319394553\n"
     ]
    }
   ],
   "source": [
    "w, b, X, Y = np.array([[1.],[2.]]), 2., np.array([[1.,2.,-1.],[3.,4.,-3.2]]), np.array([[1,0,1]])\n",
    "grads, cost = propagate(w, b, X, Y)\n",
    "print (\"dw = \" + str(grads[\"dw\"]))\n",
    "print (\"db = \" + str(grads[\"db\"]))\n",
    "print (\"cost = \" + str(cost))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**:\n",
    "\n",
    "<table style=\"width:50%\">\n",
    "    <tr>\n",
    "        <td>  ** dw **  </td>\n",
    "      <td> [[ 0.99845601]\n",
    "     [ 2.39507239]]</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td>  ** db **  </td>\n",
    "        <td> 0.00145557813678 </td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td>  ** cost **  </td>\n",
    "        <td> 5.801545319394553 </td>\n",
    "    </tr>\n",
    "\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.4 - Optimization\n",
    "- You have initialized your parameters.\n",
    "- You are also able to compute a cost function and its gradient.\n",
    "- Now, you want to update the parameters using gradient descent.\n",
    "\n",
    "**Exercise:** Write down the optimization function. The goal is to learn $w$ and $b$ by minimizing the cost function $J$. For a parameter $\\theta$, the update rule is $ \\theta = \\theta - \\alpha \\text{ } d\\theta$, where $\\alpha$ is the learning rate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: optimize\n",
    "\n",
    "def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):\n",
    "    \"\"\"\n",
    "    This function optimizes w and b by running a gradient descent algorithm\n",
    "    \n",
    "    Arguments:\n",
    "    w -- weights, a numpy array of size (num_px * num_px * 3, 1)\n",
    "    b -- bias, a scalar\n",
    "    X -- data of shape (num_px * num_px * 3, number of examples)\n",
    "    Y -- true \"label\" vector (containing 0 if non-cat, 1 if cat), of shape (1, number of examples)\n",
    "    num_iterations -- number of iterations of the optimization loop\n",
    "    learning_rate -- learning rate of the gradient descent update rule\n",
    "    print_cost -- True to print the loss every 100 steps\n",
    "    \n",
    "    Returns:\n",
    "    params -- dictionary containing the weights w and bias b\n",
    "    grads -- dictionary containing the gradients of the weights and bias with respect to the cost function\n",
    "    costs -- list of all the costs computed during the optimization, this will be used to plot the learning curve.\n",
    "    \n",
    "    Tips:\n",
    "    You basically need to write down two steps and iterate through them:\n",
    "        1) Calculate the cost and the gradient for the current parameters. Use propagate().\n",
    "        2) Update the parameters using gradient descent rule for w and b.\n",
    "    \"\"\"\n",
    "    \n",
    "    costs = []\n",
    "    \n",
    "    for i in range(num_iterations):\n",
    "        \n",
    "        \n",
    "        # Cost and gradient calculation (≈ 1-4 lines of code)\n",
    "        ### START CODE HERE ### \n",
    "        grads, cost = propagate(w, b, X, Y)\n",
    "        ### END CODE HERE ###\n",
    "        \n",
    "        # Retrieve derivatives from grads\n",
    "        dw = grads[\"dw\"]\n",
    "        db = grads[\"db\"]\n",
    "        \n",
    "        # update rule (≈ 2 lines of code)\n",
    "        ### START CODE HERE ###\n",
    "        w = w - learning_rate * dw\n",
    "        b = b - learning_rate * db\n",
    "        ### END CODE HERE ###\n",
    "        \n",
    "        # Record the costs\n",
    "        if i % 100 == 0:\n",
    "            costs.append(cost)\n",
    "        \n",
    "        # Print the cost every 100 training iterations\n",
    "        if print_cost and i % 100 == 0:\n",
    "            print (\"Cost after iteration %i: %f\" %(i, cost))\n",
    "    \n",
    "    params = {\"w\": w,\n",
    "              \"b\": b}\n",
    "    \n",
    "    grads = {\"dw\": dw,\n",
    "             \"db\": db}\n",
    "    \n",
    "    return params, grads, costs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "w = [[ 0.19033591]\n",
      " [ 0.12259159]]\n",
      "b = [ 1.92535983]\n",
      "dw = [[ 0.67752042]\n",
      " [ 1.41625495]]\n",
      "db = [ 0.2191945]\n"
     ]
    }
   ],
   "source": [
    "params, grads, costs = optimize(w, b, X, Y, num_iterations= 100, learning_rate = 0.009, print_cost = False)\n",
    "\n",
    "print (\"w = \" + str(params[\"w\"]))\n",
    "print (\"b = \" + str(params[\"b\"]))\n",
    "print (\"dw = \" + str(grads[\"dw\"]))\n",
    "print (\"db = \" + str(grads[\"db\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**: \n",
    "\n",
    "<table style=\"width:40%\">\n",
    "    <tr>\n",
    "       <td> **w** </td>\n",
    "       <td>[[ 0.19033591]\n",
    " [ 0.12259159]] </td>\n",
    "    </tr>\n",
    "    \n",
    "    <tr>\n",
    "       <td> **b** </td>\n",
    "       <td> 1.92535983008 </td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "       <td> **dw** </td>\n",
    "       <td> [[ 0.67752042]\n",
    " [ 1.41625495]] </td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "       <td> **db** </td>\n",
    "       <td> 0.219194504541 </td>\n",
    "    </tr>\n",
    "\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise:** The previous function will output the learned w and b. We are able to use w and b to predict the labels for a dataset X. Implement the `predict()` function. There are two steps to computing predictions:\n",
    "\n",
    "1. Calculate $\\hat{Y} = A = \\sigma(w^T X + b)$\n",
    "\n",
    "2. Convert the entries of a into 0 (if activation <= 0.5) or 1 (if activation > 0.5), stores the predictions in a vector `Y_prediction`. If you wish, you can use an `if`/`else` statement in a `for` loop (though there is also a way to vectorize this). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: predict\n",
    "\n",
    "def predict(w, b, X):\n",
    "    '''\n",
    "    Predict whether the label is 0 or 1 using learned logistic regression parameters (w, b)\n",
    "    \n",
    "    Arguments:\n",
    "    w -- weights, a numpy array of size (num_px * num_px * 3, 1)\n",
    "    b -- bias, a scalar\n",
    "    X -- data of size (num_px * num_px * 3, number of examples)\n",
    "    \n",
    "    Returns:\n",
    "    Y_prediction -- a numpy array (vector) containing all predictions (0/1) for the examples in X\n",
    "    '''\n",
    "    \n",
    "    m = X.shape[1]\n",
    "    Y_prediction = np.zeros((1,m))\n",
    "    w = w.reshape(X.shape[0], 1)\n",
    "    \n",
    "    # Compute vector \"A\" predicting the probabilities of a cat being present in the picture\n",
    "    ### START CODE HERE ### (≈ 1 line of code)\n",
    "    A = sigmoid(np.dot(w.T,X)+b)\n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    for i in range(A.shape[1]):\n",
    "        \n",
    "        # Convert probabilities A[0,i] to actual predictions p[0,i]\n",
    "        ### START CODE HERE ### (≈ 4 lines of code)\n",
    "        if A[0,i] > 0.5:\n",
    "            Y_prediction[0,i] = 1            \n",
    "                 \n",
    "        pass\n",
    "        ### END CODE HERE ###\n",
    "    \n",
    "    assert(Y_prediction.shape == (1, m))\n",
    "    \n",
    "    return Y_prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "predictions = [[ 1.  1.  0.]]\n"
     ]
    }
   ],
   "source": [
    "w = np.array([[0.1124579],[0.23106775]])\n",
    "b = -0.3\n",
    "X = np.array([[1.,-1.1,-3.2],[1.2,2.,0.1]])\n",
    "print (\"predictions = \" + str(predict(w, b, X)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**: \n",
    "\n",
    "<table style=\"width:30%\">\n",
    "    <tr>\n",
    "         <td>\n",
    "             **predictions**\n",
    "         </td>\n",
    "          <td>\n",
    "            [[ 1.  1.  0.]]\n",
    "         </td>  \n",
    "   </tr>\n",
    "\n",
    "</table>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "<font color='blue'>\n",
    "**What to remember:**\n",
    "You've implemented several functions that:\n",
    "- Initialize (w,b)\n",
    "- Optimize the loss iteratively to learn parameters (w,b):\n",
    "    - computing the cost and its gradient \n",
    "    - updating the parameters using gradient descent\n",
    "- Use the learned (w,b) to predict the labels for a given set of examples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5 - Merge all functions into a model ##\n",
    "\n",
    "You will now see how the overall model is structured by putting together all the building blocks (functions implemented in the previous parts) together, in the right order.\n",
    "\n",
    "**Exercise:** Implement the model function. Use the following notation:\n",
    "    - Y_prediction_test for your predictions on the test set\n",
    "    - Y_prediction_train for your predictions on the train set\n",
    "    - w, costs, grads for the outputs of optimize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: model\n",
    "\n",
    "def model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):\n",
    "    \"\"\"\n",
    "    Builds the logistic regression model by calling the function you've implemented previously\n",
    "    \n",
    "    Arguments:\n",
    "    X_train -- training set represented by a numpy array of shape (num_px * num_px * 3, m_train)\n",
    "    Y_train -- training labels represented by a numpy array (vector) of shape (1, m_train)\n",
    "    X_test -- test set represented by a numpy array of shape (num_px * num_px * 3, m_test)\n",
    "    Y_test -- test labels represented by a numpy array (vector) of shape (1, m_test)\n",
    "    num_iterations -- hyperparameter representing the number of iterations to optimize the parameters\n",
    "    learning_rate -- hyperparameter representing the learning rate used in the update rule of optimize()\n",
    "    print_cost -- Set to true to print the cost every 100 iterations\n",
    "    \n",
    "    Returns:\n",
    "    d -- dictionary containing information about the model.\n",
    "    \"\"\"\n",
    "    \n",
    "    ### START CODE HERE ###\n",
    "    \n",
    "    # initialize parameters with zeros (≈ 1 line of code)\n",
    "    w, b = initialize_with_zeros(X_train.shape[0])\n",
    "\n",
    "    # Gradient descent (≈ 1 line of code)\n",
    "    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost = True)\n",
    "    \n",
    "    # Retrieve parameters w and b from dictionary \"parameters\"\n",
    "    w = parameters[\"w\"]\n",
    "    b = parameters[\"b\"]\n",
    "    \n",
    "    # Predict test/train set examples (≈ 2 lines of code)\n",
    "    Y_prediction_test = predict(w, b, X_test)\n",
    "    Y_prediction_train = predict(w, b, X_train)\n",
    "\n",
    "    ### END CODE HERE ###\n",
    "\n",
    "    # Print train/test Errors\n",
    "    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))\n",
    "    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))\n",
    "\n",
    "    \n",
    "    d = {\"costs\": costs,\n",
    "         \"Y_prediction_test\": Y_prediction_test, \n",
    "         \"Y_prediction_train\" : Y_prediction_train, \n",
    "         \"w\" : w, \n",
    "         \"b\" : b,\n",
    "         \"learning_rate\" : learning_rate,\n",
    "         \"num_iterations\": num_iterations}\n",
    "    \n",
    "    return d"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the following cell to train your model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost after iteration 0: 0.693147\n",
      "Cost after iteration 100: 0.584508\n",
      "Cost after iteration 200: 0.466949\n",
      "Cost after iteration 300: 0.376007\n",
      "Cost after iteration 400: 0.331463\n",
      "Cost after iteration 500: 0.303273\n",
      "Cost after iteration 600: 0.279880\n",
      "Cost after iteration 700: 0.260042\n",
      "Cost after iteration 800: 0.242941\n",
      "Cost after iteration 900: 0.228004\n",
      "Cost after iteration 1000: 0.214820\n",
      "Cost after iteration 1100: 0.203078\n",
      "Cost after iteration 1200: 0.192544\n",
      "Cost after iteration 1300: 0.183033\n",
      "Cost after iteration 1400: 0.174399\n",
      "Cost after iteration 1500: 0.166521\n",
      "Cost after iteration 1600: 0.159305\n",
      "Cost after iteration 1700: 0.152667\n",
      "Cost after iteration 1800: 0.146542\n",
      "Cost after iteration 1900: 0.140872\n",
      "train accuracy: 99.04306220095694 %\n",
      "test accuracy: 70.0 %\n"
     ]
    }
   ],
   "source": [
    "d = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**: \n",
    "\n",
    "<table style=\"width:40%\"> \n",
    "\n",
    "    <tr>\n",
    "        <td> **Cost after iteration 0 **  </td> \n",
    "        <td> 0.693147 </td>\n",
    "    </tr>\n",
    "      <tr>\n",
    "        <td> <center> $\\vdots$ </center> </td> \n",
    "        <td> <center> $\\vdots$ </center> </td> \n",
    "    </tr>  \n",
    "    <tr>\n",
    "        <td> **Train Accuracy**  </td> \n",
    "        <td> 99.04306220095694 % </td>\n",
    "    </tr>\n",
    "\n",
    "    <tr>\n",
    "        <td>**Test Accuracy** </td> \n",
    "        <td> 70.0 % </td>\n",
    "    </tr>\n",
    "</table> \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**Comment**: Training accuracy is close to 100%. This is a good sanity check: your model is working and has high enough capacity to fit the training data. Test error is 68%. It is actually not bad for this simple model, given the small dataset we used and that logistic regression is a linear classifier. But no worries, you'll build an even better classifier next week!\n",
    "\n",
    "Also, you see that the model is clearly overfitting the training data. Later in this specialization you will learn how to reduce overfitting, for example by using regularization. Using the code below (and changing the `index` variable) you can look at predictions on pictures of the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.5/site-packages/ipykernel/__main__.py:4: DeprecationWarning: using a non-integer number instead of an integer will result in an error in the future\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 1, you predicted that it is a \"non-cat\" picture.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb02ae99668>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example of a picture that was wrongly classified.\n",
    "index = 30\n",
    "plt.imshow(test_set_x[:,index].reshape((num_px, num_px, 3)))\n",
    "print (\"y = \" + str(test_set_y[0,index]) + \", you predicted that it is a \\\"\" + classes[d[\"Y_prediction_test\"][0,index]].decode(\"utf-8\") +  \"\\\" picture.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's also plot the cost function and the gradients."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nYMDa293hyy/XDiXz58Ozz4YxS376KbSqKHiIiIhInZiF0Vc7d4Zddll7+5o1sGhRfgyGpjuQRURE\n8lyTJmFckXyg4CEiIiJZo+AhIiIiWaPgISIiIlmj4CEiIiJZo+AhIiIiWaPgISIiIlmj4CEiIiJZ\no+AhIiIiWaPgISIiIlmj4CEiIiJZo+AhIiIiWaPgISIiIlmj4CEiIiJZkzPBw8yGm9k8M1tuZlPM\nbEAV+3Yxs4fMbJaZrTaz67JZq+SGkpKSuEuQDNLn2bDo85TK5ETwMLPjgGuBkUB/4F1ggpl1quSQ\nlsCXwF+Bd7JSpOQc/cfWsOjzbFj0eUplciJ4ACOAO919rLvPBM4ElgHF6XZ290/cfYS7Pwh8l8U6\nRUREpA5iDx5m1hwoBCYl1rm7AxOBgXHVJSIiIpkXe/AAOgFNgUUp6xcBXbJfjoiIiNSXZnEXkEWt\nAGbMmBF3HZIhS5cupaysLO4yJEP0eTYs+jwblqTfna3qeq5cCB5fAauBzinrOwMLM/g8PQAGDx6c\nwVNK3AoLC+MuQTJIn2fDos+zQeoBvF6XE8QePNx9pZmVAvsA4wHMzKLHN2XwqSYAJwLzgRUZPK+I\niEhD14oQOibU9USxB4/IdcDoKIBMJdzl0gYYDWBmVwBd3f2kxAFmtgNgQDtgo+jxz+6e9lqKu38N\nPFyfL0JERKQBq1NLR0JOBA93HxeN2TGKcInlHeAAd18c7dIF6JZy2DTAo+8LgBOAT4Ce9V+xiIiI\n1IaFO1dFRERE6l8u3E4rIiIijYSCh4iIiGRNowgeNZmATnKbmY00szUpy4dx1yXVY2a/MLPxZvbf\n6LM7PM0+o8zsczNbZmYvmdlWcdQq67auz9PM7k/z8/pcXPVK1czsEjObambfmdkiM3vSzLZOs1+d\nfkYbfPCoxQR0kvs+IHRC7hItu8dbjtRAW0Ln8WGUdw7/HzO7CPgtcDqwM/Aj4ee1RTaLlGqr8vOM\nPE/Fn9ei7JQmtfAL4GZgF2BfoDnwopm1TuyQiZ/RBt+51MymAG+6+7nRYwMWADe5+9WxFic1ZmYj\ngSPcvSDuWqRuzGwN8Ct3H5+07nPgGne/Pnq8PmH6hJPcfVw8lUp1VPJ53g+0d/ej4qtMaiv6A/1L\nYA93/0+0rs4/ow26xUMT0DVYvaKm3Tlm9qCZpd5qLXnIzLYg/EWc/PP6HfAm+nnNZ3tGzfYzzew2\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb0403928d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot learning curve (with costs)\n",
    "costs = np.squeeze(d['costs'])\n",
    "plt.plot(costs)\n",
    "plt.ylabel('cost')\n",
    "plt.xlabel('iterations (per hundreds)')\n",
    "plt.title(\"Learning rate =\" + str(d[\"learning_rate\"]))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**Interpretation**:\n",
    "You can see the cost decreasing. It shows that the parameters are being learned. However, you see that you could train the model even more on the training set. Try to increase the number of iterations in the cell above and rerun the cells. You might see that the training set accuracy goes up, but the test set accuracy goes down. This is called overfitting. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6 - Further analysis (optional/ungraded exercise) ##\n",
    "\n",
    "Congratulations on building your first image classification model. Let's analyze it further, and examine possible choices for the learning rate $\\alpha$. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Choice of learning rate ####\n",
    "\n",
    "**Reminder**:\n",
    "In order for Gradient Descent to work you must choose the learning rate wisely. The learning rate $\\alpha$  determines how rapidly we update the parameters. If the learning rate is too large we may \"overshoot\" the optimal value. Similarly, if it is too small we will need too many iterations to converge to the best values. That's why it is crucial to use a well-tuned learning rate.\n",
    "\n",
    "Let's compare the learning curve of our model with several choices of learning rates. Run the cell below. This should take about 1 minute. Feel free also to try different values than the three we have initialized the `learning_rates` variable to contain, and see what happens. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "learning rate is: 0.01\n",
      "Cost after iteration 0: 0.693147\n",
      "Cost after iteration 100: 0.823921\n",
      "Cost after iteration 200: 0.418944\n",
      "Cost after iteration 300: 0.617350\n",
      "Cost after iteration 400: 0.522116\n",
      "Cost after iteration 500: 0.387709\n",
      "Cost after iteration 600: 0.236254\n",
      "Cost after iteration 700: 0.154222\n",
      "Cost after iteration 800: 0.135328\n",
      "Cost after iteration 900: 0.124971\n",
      "Cost after iteration 1000: 0.116478\n",
      "Cost after iteration 1100: 0.109193\n",
      "Cost after iteration 1200: 0.102804\n",
      "Cost after iteration 1300: 0.097130\n",
      "Cost after iteration 1400: 0.092043\n",
      "train accuracy: 99.52153110047847 %\n",
      "test accuracy: 68.0 %\n",
      "\n",
      "-------------------------------------------------------\n",
      "\n",
      "learning rate is: 0.001\n",
      "Cost after iteration 0: 0.693147\n",
      "Cost after iteration 100: 0.591289\n",
      "Cost after iteration 200: 0.555796\n",
      "Cost after iteration 300: 0.528977\n",
      "Cost after iteration 400: 0.506881\n",
      "Cost after iteration 500: 0.487880\n",
      "Cost after iteration 600: 0.471108\n",
      "Cost after iteration 700: 0.456046\n",
      "Cost after iteration 800: 0.442350\n",
      "Cost after iteration 900: 0.429782\n",
      "Cost after iteration 1000: 0.418164\n",
      "Cost after iteration 1100: 0.407362\n",
      "Cost after iteration 1200: 0.397269\n",
      "Cost after iteration 1300: 0.387802\n",
      "Cost after iteration 1400: 0.378888\n",
      "train accuracy: 88.99521531100478 %\n",
      "test accuracy: 64.0 %\n",
      "\n",
      "-------------------------------------------------------\n",
      "\n",
      "learning rate is: 0.0001\n",
      "Cost after iteration 0: 0.693147\n",
      "Cost after iteration 100: 0.643677\n",
      "Cost after iteration 200: 0.635737\n",
      "Cost after iteration 300: 0.628572\n",
      "Cost after iteration 400: 0.622040\n",
      "Cost after iteration 500: 0.616029\n",
      "Cost after iteration 600: 0.610455\n",
      "Cost after iteration 700: 0.605248\n",
      "Cost after iteration 800: 0.600354\n",
      "Cost after iteration 900: 0.595729\n",
      "Cost after iteration 1000: 0.591339\n",
      "Cost after iteration 1100: 0.587153\n",
      "Cost after iteration 1200: 0.583149\n",
      "Cost after iteration 1300: 0.579307\n",
      "Cost after iteration 1400: 0.575611\n",
      "train accuracy: 68.42105263157895 %\n",
      "test accuracy: 36.0 %\n",
      "\n",
      "-------------------------------------------------------\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb040282e48>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "learning_rates = [0.01, 0.001, 0.0001]\n",
    "models = {}\n",
    "for i in learning_rates:\n",
    "    print (\"learning rate is: \" + str(i))\n",
    "    models[str(i)] = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 1500, learning_rate = i, print_cost = False)\n",
    "    print ('\\n' + \"-------------------------------------------------------\" + '\\n')\n",
    "\n",
    "for i in learning_rates:\n",
    "    plt.plot(np.squeeze(models[str(i)][\"costs\"]), label= str(models[str(i)][\"learning_rate\"]))\n",
    "\n",
    "plt.ylabel('cost')\n",
    "plt.xlabel('iterations (hundreds)')\n",
    "\n",
    "legend = plt.legend(loc='upper center', shadow=True)\n",
    "frame = legend.get_frame()\n",
    "frame.set_facecolor('0.90')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Interpretation**: \n",
    "- Different learning rates give different costs and thus different predictions results.\n",
    "- If the learning rate is too large (0.01), the cost may oscillate up and down. It may even diverge (though in this example, using 0.01 still eventually ends up at a good value for the cost). \n",
    "- A lower cost doesn't mean a better model. You have to check if there is possibly overfitting. It happens when the training accuracy is a lot higher than the test accuracy.\n",
    "- In deep learning, we usually recommend that you: \n",
    "    - Choose the learning rate that better minimizes the cost function.\n",
    "    - If your model overfits, use other techniques to reduce overfitting. (We'll talk about this in later videos.) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 7 - Test with your own image (optional/ungraded exercise) ##\n",
    "\n",
    "Congratulations on finishing this assignment. You can use your own image and see the output of your model. To do that:\n",
    "    1. Click on \"File\" in the upper bar of this notebook, then click \"Open\" to go on your Coursera Hub.\n",
    "    2. Add your image to this Jupyter Notebook's directory, in the \"images\" folder\n",
    "    3. Change your image's name in the following code\n",
    "    4. Run the code and check if the algorithm is right (1 = cat, 0 = non-cat)!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "## START CODE HERE ## (PUT YOUR IMAGE NAME) \n",
    "my_image = \"my_image.jpg\"   # change this to the name of your image file \n",
    "## END CODE HERE ##\n",
    "\n",
    "# We preprocess the image to fit your algorithm.\n",
    "fname = \"images/\" + my_image\n",
    "image = np.array(ndimage.imread(fname, flatten=False))\n",
    "my_image = scipy.misc.imresize(image, size=(num_px,num_px)).reshape((1, num_px*num_px*3)).T\n",
    "my_predicted_image = predict(d[\"w\"], d[\"b\"], my_image)\n",
    "\n",
    "plt.imshow(image)\n",
    "print(\"y = \" + str(np.squeeze(my_predicted_image)) + \", your algorithm predicts a \\\"\" + classes[int(np.squeeze(my_predicted_image)),].decode(\"utf-8\") +  \"\\\" picture.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='blue'>\n",
    "**What to remember from this assignment:**\n",
    "1. Preprocessing the dataset is important.\n",
    "2. You implemented each function separately: initialize(), propagate(), optimize(). Then you built a model().\n",
    "3. Tuning the learning rate (which is an example of a \"hyperparameter\") can make a big difference to the algorithm. You will see more examples of this later in this course!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, if you'd like, we invite you to try different things on this Notebook. Make sure you submit before trying anything. Once you submit, things you can play with include:\n",
    "    - Play with the learning rate and the number of iterations\n",
    "    - Try different initialization methods and compare the results\n",
    "    - Test other preprocessings (center the data, or divide each row by its standard deviation)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bibliography:\n",
    "- http://www.wildml.com/2015/09/implementing-a-neural-network-from-scratch/\n",
    "- https://stats.stackexchange.com/questions/211436/why-do-we-normalize-images-by-subtracting-the-datasets-image-mean-and-not-the-c"
   ]
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "neural-networks-deep-learning",
   "graded_item_id": "XaIWT",
   "launcher_item_id": "zAgPl"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
